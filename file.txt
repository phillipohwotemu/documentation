CICD/PIPELINE :Github-jenkins-maven=sonar-nexus-tomcat

Spin up ec2 server for the application
install 
jenkins
maven 
sonar
nexus
tomcat 
all separate machines

Install Jenkins

 sudo apt-get update
 sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
 echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
 sudo apt-get update
 sudo apt-get install docker-ce docker-ce-cli containerd.io
 sudo usermod -aG docker $USER
And now you can install Docker Compose :

 sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
 sudo chmod +x /usr/local/bin/docker-compose
Nano docker-compose.yml. and add the file below

version: '3.7'
services:
  jenkins:
    image: jenkins/jenkins:lts
    privileged: true
    user: root
    ports:
      - 8080:8080
      - 50000:50000
    container_name: jenkins-lts
    volumes:
      - ~/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/local/bin/docker:/usr/local/bin/docker
Save and then run docker-compose up -d
to get Jenkins password run:docker exec jenkins-lts cat /var/jenkins_home/secrets/initialAdminPassword
Install Maven :

sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y apache-maven
mvn ‚Äìversion
 
Install Sonarqube:

$> sudo apt-get update
$> sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
$> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
$> echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
$> sudo apt-get update
$> sudo apt-get install docker-ce docker-ce-cli containerd.io
$> sudo groupadd docker
$> sudo usermod -aG docker $USER
Logout and Login again to your server, you should be able to run

$> docker run hello-world
And now you can install Docker Compose :

$> sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$> sudo chmod +x /usr/local/bin/docker-compose
üèµÔ∏è Adjust OS settings

SonarQube has some hardware requirements : you should increase the values for those 2 OS settings :

fs.file-max: ‚ÄúThe value in file-max denotes the maximum number of file- handles that the Linux kernel will allocate. When you get lots of error messages about running out of file handles, you might want to increase this limit.‚Äù
vm.max_map_count: ‚Äúthe maximum number of memory map areas a process may have. Memory map areas are used as a side-effect of calling malloc, directly by mmap and mprotect, and also when loading shared libraries.‚Äù
You should modifiy as root user the /etc/sysctl.conf file to set permanently the values for these 2 parameters :

$> sudo nano /etc/sysctl.conf
Then add this content to the file :

# can be added at the end of the file
fs.file-max=131072
vm.max_map_count=524288
Save, close, and then reload the settings :

$> sudo sysctl --system
üöÄ Run SonarQube

Set the following docker-compose.yml file to run both SonarQube and PostgreSQL 12 containers : sudo nano docker-compose.yml and past the following

version: "3"

services:
  sonarqube:
    image: sonarqube:8.9.2-community
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar #tochange
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
  db:
    image: postgres:12
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar #tochange
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:
It would be best if you changed the default password.

You‚Äôre now ready to run your SonarQube üöÄ

$> docker-compose up -d
You can check the evolution of the logs using docker-compose logs -f command. SonarQube is ready when the following logs are displayed :

$> docker-compose logs -f
...
sonarqube_1  | 2021.08.02 07:05:05 INFO  ce[][o.s.ce.app.CeServer] Compute Engine is operational
sonarqube_1  | 2021.08.02 07:05:05 INFO  app[][o.s.a.SchedulerImpl] Process[ce] is up
sonarqube_1  | 2021.08.02 07:05:05 INFO  app[][o.s.a.SchedulerImpl] SonarQube is up
Wait a little bit and you should get the following screen on http://localhost:9000 :



INSTALL NEXUS

update server

sudo apt-get install docker-compose -y

sudo usermod -aG docker $USER

sudo vi docker-compose.yml 

version: "3"
services:
  nexus:
    image: sonatype/nexus3
    restart: always
    volumes:
      - "nexus-data:/sonatype-work"
    ports:
      - "8081:8081"
      - "8085:8085"

volumes:
  nexus-data: {}

sudo docker-compose up -d 

sudo docker-compose logs ‚Äîfollow

default user is admin, to get password: sudo docker exec -t ubuntu_nexus_1  cat /nexus-data/admin.password

INSTALL TOMCAT

Update server
sudo apt install openjdk-11-jdk
sudo apt-cache search tomcat
sudo apt install tomcat9 tomcat9-admin
ss -ltn
sudo ufw allow from any to any port 8080 proto tcp
sudo nano /etc/tomcat9/tomcat-users.xml
Paste the following at the bottom
<role rolename="admin-gui"/>
<role rolename="manager-gui"/gt;
<user username="tomcat" password="pass" roles="admin-gui,manager-gui"/>
sudo systemctl restart tomcat9

enter your ip details: http://127.0.0.1:8080/manager/html

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





pipeline {

    agent any

    environment {

        PATH = "/opt/apache-maven-3.6.3/bin:$PASH"

    }

    stages {

        stage('git-clone') {

            steps {

                git branch: 'main', url: 'https://github.com/phillipohwotemu/maven-kub.git'

            }

        }

        stage('build') {

            steps {

              sh "mvn clean install"

            }

        }

    }

}

HOW TO INSTALL A JDK AND MAVEN IN UBUNTU

$ wget https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz
$ tar -xvf openjdk-20.0.1_linux-x64_bin.tar.gz
$ mv jdk-20.0.1 /opt/

Step 2: Setting JAVA_HOME and Path Environment Variables

Open .profile file from the home directory and add the following lines to it.

JAVA_HOME='/opt/jdk-20.0.1
PATH="$JAVA_HOME/bin:$PATH"
export PATH

Step 3: Verify the Java Installation

You can run java -version command to verify the JDK installation.

$ java -version
openjdk version "13.0.1" 2019-10-15
OpenJDK Runtime Environment (build 13.0.1+9)
OpenJDK 64-Bit Server VM (build 13.0.1+9, mixed mode, sharing)
$


Installing Maven on Linux/Ubuntu

We will install Maven in a similar way that we have installed JDK in the Linux system.
Step 1: Download the Maven Binaries

Go to the URL: https://maven.apache.org/download.cgi Copy the link for the ‚ÄúBinary tar.gz archive‚Äù file. Then run the following commands to download and untar it.

$ wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
$ tar -xvf apache-maven-3.6.3-bin.tar.gz
$ mv apache-maven-3.6.3 /opt/

Step 2: Setting M2_HOME and Path Variables

Add the following lines to the user profile file (.profile).

M2_HOME='/opt/apache-maven-3.6.3'
PATH="$M2_HOME/bin:$PATH"
export PATH

Relaunch the terminal or execute source .profile to apply the changes.
Step 3: Verify the Maven installation

Execute mvn -version command and it should produce the following output.

$ mvn -version
Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)
Maven home: /opt/apache-maven-3.6.3
Java version: 13.0.1, vendor: Oracle Corporation, runtime: /opt/jdk-13.0.1
Default locale: en, platform encoding: UTF-8
OS name: "linux", version: "4.15.0-47-generic", arch: "amd64", family: "unix"
$




